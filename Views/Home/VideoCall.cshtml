@{
    ViewData["Title"] = "Video Call";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebRTC Demo</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; background-color: #f9f9f9; color: #333;">
    <h2 style="color: #007BFF;">Study With Me</h2>
    <div class="videos" style="display: flex; justify-content: space-between; gap: 20px; margin-bottom: 20px;">
        <span style="flex: 1; text-align: center;">
            <h3 style="margin-bottom: 10px;">Local Stream</h3>
            <video id="webcamVideo" autoplay playsinline style="width: 100%; max-width: 1000px; height: 700px; background-color: #000; border: 2px solid #007BFF;"></video>
        </span>
        <span style="flex: 1; text-align: center;">
            <h3 style="margin-bottom: 10px;">Remote Stream</h3>
            <video id="remoteVideo" autoplay playsinline style="width: 100%; max-width: 1000px; height: 700px; background-color: #000; border: 2px solid #28A745;"></video>
        </span>
    </div>

    <button id="webcamButton" style="padding: 10px 20px; background-color: #007BFF; color: #fff; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 20px;">Start webcam</button>
    <label for="cameraSelect">Choose Camera:</label>
    <select id="cameraSelect"></select>
    <h2 style="color: #007BFF;">Manually create a call first</h2>
    <button id="callButton" disabled style="padding: 10px 20px; background-color: #28A745; color: #fff; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 20px; opacity: 0.7;">Create Call (offer)</button>

    <h2 style="color: #007BFF;">Join a call</h2>
    <p style="margin-bottom: 10px;">Answer the call from a different browser window or device</p>
    <input id="callInput" style="padding: 10px; width: calc(100% - 24px); max-width: 300px; border: 1px solid #ccc; border-radius: 4px; margin-right: 10px;" />
    <button id="answerButton" disabled style="padding: 10px 20px; background-color: #FFC107; color: #fff; border: none; border-radius: 4px; cursor: pointer; opacity: 0.7;">Answer</button>

    <h2 style="color: #007BFF;">Hangup</h2>
    <button id="hangupButton" disabled style="padding: 10px 20px; background-color: #DC3545; color: #fff; border: none; border-radius: 4px; cursor: pointer; opacity: 0.7;">Hangup</button>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
        import { getFirestore, collection, doc, setDoc, updateDoc, onSnapshot, addDoc, getDoc } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

        const firebaseConfig = {
            // Enter info here
        };


        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const firestore = getFirestore(app);

        const servers = {
            iceServers: [
                {
                    urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],
                },
            ],
            iceCandidatePoolSize: 10,
        };

        // Global State
        const pc = new RTCPeerConnection(servers);
        let localStream = null;
        let remoteStream = null;

        // HTML elements
        const webcamButton = document.getElementById('webcamButton');
        const webcamVideo = document.getElementById('webcamVideo');
        const callButton = document.getElementById('callButton');
        const callInput = document.getElementById('callInput');
        const answerButton = document.getElementById('answerButton');
        const remoteVideo = document.getElementById('remoteVideo');
        const hangupButton = document.getElementById('hangupButton');
        const cameraSelect = document.getElementById('cameraSelect');

        // Function to populate camera selection dropdown
        async function populateCameraOptions() {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const videoInputDevices = devices.filter(device => device.kind === 'videoinput');
            cameraSelect.innerHTML = ''; // Clear previous options

            videoInputDevices.forEach((device, index) => {
                const option = document.createElement('option');
                option.value = device.deviceId;
                option.textContent = device.label || `Camera ${index + 1}`;
                cameraSelect.appendChild(option);
            });

            // Set default camera if available
            if (videoInputDevices.length > 0) {
                cameraSelect.value = videoInputDevices[1].deviceId;
            }
        }

        // Populate cameras on page load
        populateCameraOptions();

        // 1. Setup media sources

        webcamButton.onclick = async () => {
            const selectedDeviceId = cameraSelect.value; // Get selected camera's deviceId

            localStream = await navigator.mediaDevices.getUserMedia({
                video: { deviceId: selectedDeviceId ? { exact: selectedDeviceId } : undefined },
                audio: true,
            });

            remoteStream = new MediaStream();

            // Push tracks from local stream to peer connection
            localStream.getTracks().forEach((track) => {
                pc.addTrack(track, localStream);
            });

            // Pull tracks from remote stream, add to video stream
            pc.ontrack = (event) => {
                event.streams[0].getTracks().forEach((track) => {
                    remoteStream.addTrack(track);
                });
            };

            webcamVideo.srcObject = localStream;
            remoteVideo.srcObject = remoteStream;

            callButton.disabled = false;
            answerButton.disabled = false;
            webcamButton.disabled = true;
        };

        // 2. Create an offer
        callButton.onclick = async () => {
            // Reference Firestore collections for signaling
            const callDocRef = doc(collection(firestore, 'calls'));
            const offerCandidates = collection(callDocRef, 'offerCandidates');
            const answerCandidates = collection(callDocRef, 'answerCandidates');

            callInput.value = callDocRef.id;

            // Get candidates for caller, save to db
            pc.onicecandidate = (event) => {
                event.candidate && addDoc(offerCandidates, event.candidate.toJSON());
            };

            // Create offer
            const offerDescription = await pc.createOffer();
            await pc.setLocalDescription(offerDescription);

            const offer = {
                sdp: offerDescription.sdp,
                type: offerDescription.type,
            };

            await setDoc(callDocRef, { offer });

            // Listen for remote answer
            onSnapshot(callDocRef, (snapshot) => {
                const data = snapshot.data();
                if (!pc.currentRemoteDescription && data?.answer) {
                    const answerDescription = new RTCSessionDescription(data.answer);
                    pc.setRemoteDescription(answerDescription);
                }
            });

            // When answered, add candidate to peer connection
            onSnapshot(answerCandidates, (snapshot) => {
                snapshot.docChanges().forEach((change) => {
                    if (change.type === 'added') {
                        const candidate = new RTCIceCandidate(change.doc.data());
                        pc.addIceCandidate(candidate);
                    }
                });
            });

            hangupButton.disabled = false;
        };

        // 3. Answer the call with the unique ID
        answerButton.onclick = async () => {
            const callId = callInput.value;
            const callDocRef = doc(firestore, 'calls', callId); // Reference to the 'calls' document
            const answerCandidatesRef = collection(callDocRef, 'answerCandidates'); // Subcollection reference
            const offerCandidatesRef = collection(callDocRef, 'offerCandidates');
            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    addDoc(answerCandidatesRef, event.candidate.toJSON())
                        .then(() => {
                            console.log("Candidate added successfully!");
                        })
                        .catch((error) => {
                            console.error("Error adding candidate: ", error);
                        });
                }
            };

            const docSnapshot = await getDoc(callDocRef);
            if (!docSnapshot.exists()) {
                console.error('Call document does not exist!');
                return;
            }
            const callData = docSnapshot.data();

            const offerDescription = callData.offer;
            await pc.setRemoteDescription(new RTCSessionDescription(offerDescription));

            const answerDescription = await pc.createAnswer();
            await pc.setLocalDescription(answerDescription);

            const answer = {
                type: answerDescription.type,
                sdp: answerDescription.sdp,
            };

            // Update the document with the answer
            await updateDoc(callDocRef, { answer });

            onSnapshot(offerCandidatesRef, (snapshot) => {
                snapshot.docChanges().forEach((change) => {
                    if (change.type === 'added') {
                        const data = change.doc.data();
                        pc.addIceCandidate(new RTCIceCandidate(data));
                    }
                });
            });
        };
    </script>
</body>
</html> 